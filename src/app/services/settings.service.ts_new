import { Injectable } from '@angular/core';
import { LWdbService } from './lwdb.service';


@Injectable({
  providedIn: 'root'
})

export class SettingsService {

  private selectedLanguageNo : number = 2;
  public selectedLanguage : string = 'English';

  public settings : any;
  lwdb : LWdbService;




  constructor(l : LWdbService) { 
         this.lwdb = l;
         this.settings = this.lwdb.getSettings();
}



 setUseThirdLanguage(b : boolean) {
    this.settings.useThirdLanguage = b;
    this.lwdb.putSettings(this.settings)
    console.log('settings.service useThirdLanguage was set to: ' + this.settings.useThirdLanguage);

  }


 setIncludePicturesWithNoLabel(b : boolean) {
    this.settings.includePicturesWithNoLabel = b;
    this.lwdb.putSettings(this.settings)
    console.log('settings.service includePicturesWithNoLabel was set to: ' + this.settings.includePicturesWithNoLabel);
  }



  setSelectedLanguageNo(n : number) {
    // determines which of the languages will be set by the next call to
    // setSelectedLangauge(lang)
    this.selectedLanguageNo = n;
    if (n == 1) {this.selectedLanguage = this.settings.language1};
    if (n == 2) {this.selectedLanguage = this.settings.language2};
    if (n == 3) {this.selectedLanguage = this.settings.language3};
    console.log('settings.service setSelectedLanguage: ' + n + ' ' + this.selectedLanguage);
  }



  setSelectedLanguage(lang) {
    console.log('settings.service setSelectedLanguage');
    this.selectedLanguage = lang;

    if (this.selectedLanguageNo == 1) {this.settings.language1 = lang};
    if (this.selectedLanguageNo == 2) {this.settings.language2 = lang};
    if (this.selectedLanguageNo == 3) {this.settings.language3 = lang};
 
    this.lwdb.putSettings(this.settings);

    console.log('settings.service language was set to: ' + lang + '; language: ' +this.selectedLanguage);

  }



public getLanguageList() {
   var list = this.settings.language1;
   list += ' - ' + this.settings.language2;
   if (this.settings.useThirdLanguage) {list += ' - ' + this.settings.language3};
   return list;
}




public getLanguageAbreviation(lang) {
    if (lang == 'Dagbani') {return 'dag'}
    if (lang == 'French') {return 'fr'}
    if (lang == 'German') {return 'ge'}
    if (lang == 'Italian') {return 'it'}

    if (lang == 'Gurene') {return 'gur'}
    if (lang == 'Kusaal') {return 'kus'}
    if (lang == 'Adele') {return 'ade'}
    if (lang == 'Gikyode') {return 'acd'} 

    if (lang == 'Hanga') {return 'hag'} 
    if (lang == 'Bimoba') {return 'bim'} 
    if (lang == 'Birifor') {return 'biv'} 
    if (lang == 'Tampulma') {return 'tpm'} 
    if (lang == 'Sisaala') {return 'sil'} 
    if (lang == 'Gonja') {return 'gjn'}  
    if (lang == 'Buli') {return 'bwu'}  
    if (lang == 'Ewe') {return 'ewe'}  

    if (lang == 'Kasem') {return 'xsm'} 
    if (lang == 'Koma / Konni') {return 'kma'}  
    if (lang == 'Mampruli') {return 'mam'}  
    if (lang == 'Nawuri') {return 'naw'} 
    if (lang == 'Nkonya') {return 'nko'}  
    if (lang == 'Nafaanra') {return 'nfr'}  

    if (lang == 'Vagla') {return 'vag'}  
    if (lang == 'Ntrubo') {return 'ntr'}  
    if (lang == 'Anufo') {return 'cko'}  
    if (lang == 'DÉ›g') {return 'mzw'}  

    
    // below : get proper codes.
    if (lang == 'Akuapem Twi') {return 'akuapem'}  
    
    // abreviation not found. Return English as default. 
    return 'en'; 

  }




}
